import { ScrollEvent } from '../Scroller';
import { View } from '../View';
import { HummerElement, ViewEvent } from "../../HummerElement";
export declare class ListJS extends HummerElement {
    private _onRegister;
    private _onCreate;
    private _onUpdate;
    private _onRefreshList;
    private _eventListener;
    private _onLoadMoreList;
    private _refreshView;
    private _loadMoreView;
    private visibleItems;
    private visibleItemHeight;
    private scrollY;
    private startIndex;
    private maxIndexByAvailableHeight;
    private lastStartIndex;
    private initListItemNumber;
    private deletedIndices;
    private direction;
    private viewTop;
    private scroller;
    private topViewId;
    constructor(id?: string, name?: string, props?: any);
    private onScroll;
    private onScrollBottom;
    private resetListState;
    private resetListView;
    private onScrollTop;
    private renderItem;
    private adjustTopView;
    private removeDeletedIndex;
    private handleDownDeletion;
    private handleUpDeletion;
    private removeCell;
    private handleDeletion;
    private getMinAndMaxRenderItemIndex;
    private calculateVisibleIndices;
    private handleDown;
    private handleUp;
    private updateVisibleItems;
    private initList;
    refresh(count: number): void;
    stopLoadMore(enable: boolean): void;
    stopPullRefresh(): void;
    set onLoadMore(value: (state: number) => void);
    set onRefresh(value: (state: number) => void);
    get refreshView(): View;
    set refreshView(value: View);
    get loadMoreView(): View;
    set loadMoreView(value: View);
    get onCreate(): Function;
    set onCreate(value: Function);
    get onUpdate(): Function;
    set onUpdate(value: Function);
    get onRegister(): Function;
    set onRegister(value: Function);
    set showScrollBar(value: boolean);
    set bounces(value: boolean);
    addEventListener(eventName: string, eventListener: (event: ScrollEvent | ViewEvent | any) => void | Function | EventListener, useCapture?: boolean | undefined): void;
}
