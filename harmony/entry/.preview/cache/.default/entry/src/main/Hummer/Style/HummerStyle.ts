import type { IHummerStyle } from './IHummerStyle';
export default class HummerStyle implements IHummerStyle {
    width?: string | number;
    height?: string | number;
    minWidth?: string | number;
    maxWidth?: string | number;
    minHeight?: string | number;
    maxHeight?: string | number;
    marginLeft?: string | number;
    marginTop?: string | number;
    marginRight?: string | number;
    marginBottom?: string | number;
    paddingLeft?: string | number;
    paddingTop?: string | number;
    paddingRight?: string | number;
    paddingBottom?: string | number;
    display?: 'flex' | 'none';
    top?: string | number;
    left?: string | number;
    right?: string | number;
    bottom?: string | number;
    position?: 'relative' | 'absolute' | 'fixed';
    flexDirection: 'column' | 'row';
    flexWrap?: 'NoWrap' | 'Wrap' | 'WrapReverse';
    justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
    alignItems?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    alignContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';
    flexGrow: number;
    flexShrink: number;
    flexBasis?: string | number;
    alignSelf?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' | 'auto';
    backgroundColor?: string;
    backgroundImage?: string;
    boxSizing: 'none' | 'border-box';
    borderTopStyle: 'none' | 'solid' | 'dashed' | 'dotted';
    borderLeftStyle: 'none' | 'solid' | 'dashed' | 'dotted';
    borderRightStyle: 'none' | 'solid' | 'dashed' | 'dotted';
    borderBottomStyle: 'none' | 'solid' | 'dashed' | 'dotted';
    borderLeftColor?: string;
    borderTopColor?: string;
    borderRightColor?: string;
    borderBottomColor?: string;
    borderLeftWidth?: string | number;
    borderTopWidth?: string | number;
    borderRightWidth?: string | number;
    borderBottomWidth?: string | number;
    borderTopLeftRadius?: string | number;
    borderTopRightRadius?: string | number;
    borderBottomLeftRadius?: string | number;
    borderBottomRightRadius?: string | number;
    shadow?: string;
    opacity: number;
    visibility: 'visible' | 'hidden';
    zIndex?: number;
    overflow: 'visible' | 'hidden';
}
